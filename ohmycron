#!/bin/bash
set -o errexit -o nounset -o pipefail
function -h {
cat <<USAGE
 USAGE: ohmycron ((-t|--tag) <unique-lock-token>)? <cmd> <arg>*

  Log the job to Syslog, lock it and load the user environment.

USAGE
}; function --help { -h ;}                 # A nice way to handle -h and --help
export LC_ALL=en_US.UTF-8                    # A locale that works consistently
export PATH=/usr/local/bin:"$PATH"

function main {
  local tag="ohmycron[$$]"
  echo $tag
  if [[ $# -eq 2 && ${1:-} = '-c' ]]
  then as_shell "$2"
  else as_wrapper "$@"
  fi
}

function as_shell {
  local code="$1" name=
  if name="$(look_for_explicit_lock_token "$code")"
  then
    run "$name" bash -c "$code"
  else
    name="$(awk '{print $1}' <<<"$code")"
    name="${name##*/}"
    run "$name" bash -c "$code"
  fi
}

function as_wrapper {
  local found=false after=() before=() name="${1##*/}"
  while [[ $# -gt 0 ]]
  do
    case "$1" in
      -t|--tag) name="$2" ; shift ;;
      --)       found=true
                before=( "${after[@]:+${after[@]}}" )
                after=() ;;
      *)        after+=( "$1" ) ;;
    esac
    shift
  done
  if "$found" && [[ ${#before[@]} -gt 0 ]]
  then err "Unknown flags: ${before[@]}"
  fi
  if [[ ${#after[@]} -eq 0 ]]
  then err "No arguments passed -- can't run empty command vector."
  fi
  if ! which "${after[0]}" &> /dev/null
  then err "Command \`${after[0]}\` is not on the PATH."
  fi
  run "$name" "${after[@]}"
}

function run {
  local name="$1"; shift
  case "$name" in
    ?*://*/?*#?*) run_under_dld "${name##*#}" "$name" "$@" ;;
    *://*#*)      err "Broken/partial lock URL ($name). (No #... part?)" ;;
    */*)          err "Invalid lock token ($name). (No slashes, please.)" ;;
    ?*)           run_under_flock "$name" "$name" "$@" ;;
    *)            err "Resembles neither a simple name nor a URL ($name)." ;;
  esac
}

function run_under_flock {
  local tag="$1[$$]"; shift
  local lock="$1"; shift
  echo $tag
  echo $lock
  case "$lock" in
    */*) err "Invalid lock token ($lock). (No slashes, please.)" ;;
  esac
  local lockpath=/tmp/ohmycron~"$(whoami)"/"$lock"
  mkdir -p "$(dirname "$lockpath")"
  if flock -nx 9
  then
    cd ~
    for rc in /etc/profile /etc/bashrc ~/.profile ~/.bashrc
    do
      [[ -s $rc ]] || continue
      set +o errexit +o nounset +o pipefail
      source "$rc"
      set -o errexit -o nounset -o pipefail
    done
    out "pid $$ at $(date -u +%FT%TZ)" > "$lockpath"
    exec -- "$@"
  else
    [[ ! -s $lockpath ]] || msg "Previous lock holder: $(< "$lockpath")"
    err "Failed to lock $lockpath; is another copy running?"
  fi 9>> "$lockpath"
}

function run_under_dld {
  local tag="$1[$$]"; shift
  local lock="$1"; shift
  echo $tag
  echo $lock
  cd ~
  for rc in /etc/profile /etc/bashrc ~/.profile ~/.bashrc
  do
    [[ -s $rc ]] || continue
    set +o errexit +o nounset +o pipefail
    source "$rc"
    set -o errexit -o nounset -o pipefail
  done
  if ! which dld &> /dev/null
  then err "Not able to find \`dld\` managing distributed lock: $lock"
  fi
  exec dld "$lock" -- "$@"
}

function look_for_explicit_lock_token {
  local pattern= line=
  line="$(head -n1 <<<"$1")"
  pattern='^ *: +([^ ][^;]*[^ ]) +;'
  [[ $line =~ $pattern ]] && out "${BASH_REMATCH[1]}"
}

##################################################################### Utilities
function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

######################### Delegates to subcommands or runs main, as appropriate
if declare -f -- "${1:-}" >/dev/null
then "$@"
else main "$@"
fi
